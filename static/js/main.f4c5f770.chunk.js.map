{"version":3,"sources":["components/ShowCars.js","App.js","reportWebVitals.js","index.js"],"names":["ShowCars","carsPropsList","useState","carsList","setCarsList","changeBg","element","a","data","inService","config","method","url","id","headers","axios","then","response","newCarsList","find","el","car","map","Card","className","onClick","Img","variant","src","image","Body","Title","Text","description","make","model","scheduledDate","kilometers","App","isLoading","setIsLoading","carsData","setCarsData","useEffect","getCars","get","cars","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sSAKe,SAASA,EAAT,GAAoC,IAAjBC,EAAgB,EAAhBA,cAAgB,EACdC,mBAASD,GADK,mBACxCE,EADwC,KAC9BC,EAD8B,KAG1CC,EAAQ,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DACXC,EAAO,CAAC,WAAaF,EAAQG,UAAU,eAAiB,QAAQ,aAAe,cAC/EC,EAAS,CACXC,OAAQ,QACRC,IAAI,mEAAD,OAAqEN,EAAQO,IAChFC,QAAS,CACP,eAAgB,oBAElBN,KAAMA,GARO,SAWTO,IAAML,GACXM,MAAK,SAAUC,GACd,IAAIC,EAAW,YAAOf,GACAe,EAAYC,MAAK,SAAAC,GAAE,OAAEA,IAAKd,KAChCG,UAAYQ,EAAST,KAAKa,IAAIZ,UAC9CL,EAAYc,MAhBC,2CAAH,sDAoCd,OACWf,EAhBKmB,KAAI,SAAAF,GAAE,OAChB,eAACG,EAAA,EAAD,CAAMC,UAAS,cAASJ,EAAGX,UAAY,aAAe,IAAMgB,QAAS,kBAAIpB,EAASe,IAAlF,UACE,cAACG,EAAA,EAAKG,IAAN,CAAUC,QAAQ,MAAMC,IAAKR,EAAGS,QAChC,eAACN,EAAA,EAAKO,KAAN,WACE,eAACP,EAAA,EAAKQ,MAAN,WAAY,yCAAZ,IAAkCX,EAAGP,MACnC,eAACU,EAAA,EAAKS,KAAN,WAAW,kDAAX,IAA0CZ,EAAGa,eAC7C,eAACV,EAAA,EAAKS,KAAN,WAAW,2CAAX,IAAmCZ,EAAGc,QACtC,eAACX,EAAA,EAAKS,KAAN,WAAW,4CAAX,IAAoCZ,EAAGe,SACvC,eAACZ,EAAA,EAAKS,KAAN,WAAW,qDAAX,IAA6CZ,EAAGgB,iBAChD,eAACb,EAAA,EAAKS,KAAN,WAAW,iDAAX,IAAyCZ,EAAGiB,mBAR0CjB,EAAGP,OCQxFyB,MA3Bf,WAAgB,IAAD,EACuBpC,oBAAS,GADhC,mBACLqC,EADK,KACMC,EADN,OAEqBtC,qBAFrB,mBAELuC,EAFK,KAEKC,EAFL,KAIbC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAO,uCAAG,4BAAArC,EAAA,sEACSQ,IAAM8B,IAXb,oEAUF,OACR5B,EADQ,OAEdyB,EAAYzB,EAAST,KAAKsC,MAC1BN,GAAa,GAHC,2CAAH,qDAMb,OAAID,EACK,6CAKP,qBAAKf,UAAU,YAAf,SACE,cAACxB,EAAD,CAAUC,cAAewC,OCpBhBM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjC,MAAK,YAAkD,IAA/CkC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f4c5f770.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport '../App.css';\nimport Card from 'react-bootstrap/Card';\n\nexport default function ShowCars({carsPropsList}) {\n  const [ carsList, setCarsList ] = useState(carsPropsList)\n\n  const changeBg = async (element) => {\n    var data = {\"inService\":!element.inService,\"personInCharge\":\"Jorge\",\"estimateDate\":\"03/03/2021\"};\n    var config = {\n      method: 'patch',\n      url: `http://carsback-env.eba-faqp7dvt.us-east-2.elasticbeanstalk.com/${element.id}`,\n      headers: { \n        'Content-Type': 'application/json'\n      },\n      data: data\n    };\n    \n    await axios(config)\n    .then(function (response) {\n      let newCarsList = [...carsList]\n      let elementToChange = newCarsList.find(el=>el===element)\n      elementToChange.inService = response.data.car.inService\n      setCarsList(newCarsList)\n    })\n  }\n\n  const showCars = cars => {\n      return cars.map(el=>(\n        <Card className={`car ${el.inService ? 'changeBack' : ''}`} onClick={()=>changeBg(el)} key={el.id}>\n          <Card.Img variant=\"top\" src={el.image} />\n          <Card.Body>\n            <Card.Title><strong>ID:</strong> {el.id}</Card.Title>\n              <Card.Text><strong>Description:</strong> {el.description}</Card.Text>\n              <Card.Text><strong>Make:</strong> {el.make}</Card.Text>\n              <Card.Text><strong>Model:</strong> {el.model}</Card.Text>\n              <Card.Text><strong>Scheduled Date:</strong> {el.scheduledDate}</Card.Text>\n              <Card.Text><strong>Kilometers:</strong> {el.kilometers}</Card.Text>\n          </Card.Body>\n        </Card>\n      ))\n  }\n\n  return (\n    showCars(carsList)\n  )\n}\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\n\n\nimport ShowCars from './components/ShowCars'\n\nconst httpAddress = 'http://carsback-env.eba-faqp7dvt.us-east-2.elasticbeanstalk.com/'\n\nfunction App() {\n  const [ isLoading, setIsLoading ] = useState(true)\n  const [ carsData, setCarsData ] = useState()\n\n  useEffect(() => {\n    getCars() \n  }, [])\n\n  const getCars = async () => {\n    const response = await axios.get(httpAddress);\n    setCarsData(response.data.cars);\n    setIsLoading(false);\n  }\n  \n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  return (\n    \n    <div className='container'>\n      <ShowCars carsPropsList={carsData} />\n    </div>\n  \n  )  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}